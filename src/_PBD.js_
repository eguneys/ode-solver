function getQuatAxis0(q) {
	let x2 = q.x * 2.0;
    let w2 = q.w * 2.0;
    return new THREE.Vector3((q.w * w2) - 1.0 + q.x * x2, (q.z * w2) + q.y * x2, (-q.y * w2) + q.z * x2);
}
function getQuatAxis1(q) {
	let y2 = q.y * 2.0;
    let w2 = q.w * 2.0;
    return new THREE.Vector3((-q.z * w2) + q.x * y2, (q.w * w2) - 1.0 + q.y * y2, (q.x * w2) + q.z * y2);
}
function getQuatAxis2(q) {
	let z2 = q.z * 2.0;
	let w2 = q.w * 2.0;
	return new THREE.Vector3((q.y * w2) + q.x * z2, (-q.x * w2) + q.y * z2, (q.w * w2) - 1.0 + q.z * z2);
} 


    setBox(size, density = 1.0) {
        let mass = size.x * size.y * size.z * density;
        this.invMass = 1.0 / mass;
        mass /= 12.0;
        this.invInertia.set(
            1.0 / (size.y * size.y + size.z * size.z) / mass,
            1.0 / (size.z * size.z + size.x * size.x) / mass,
            1.0 / (size.x * size.x + size.y * size.y) / mass);
    }


function limitAngle(body0, body1, n, a, b, minAngle, maxAngle, compliance, dt, maxCorr = Math.PI)
{
    // the key function to handle all angular joint limits
    let c = new THREE.Vector3();
    c.crossVectors(a, b);

    let phi = Math.asin(c.dot(n));
    if (a.dot(b) < 0.0)
        phi = Math.PI - phi;

    if (phi > Math.PI)
        phi -= 2.0 * Math.PI;
    if (phi < -Math.PI)
        phi += 2.0 * Math.PI;

    if (phi < minAngle || phi > maxAngle) {
        phi = Math.min(Math.max(minAngle, phi), maxAngle);

        let q = new THREE.Quaternion();
        q.setFromAxisAngle(n, phi);

        let omega = a.clone();
        omega.applyQuaternion(q);
        omega.cross(b);

        phi = omega.length();
        if (phi > maxCorr) 
            omega.multiplyScalar(maxCorr / phi);

        applyBodyPairCorrection(body0, body1, omega, compliance, dt);
    }
}	

// Joint class  -----------------------------------------------------------

const JointType = {
    SPHERICAL: "spherical",
    HINGE: "hinge",
    FIXED: "fixed"
}

class Joint {
    constructor(type, body0, body1, localPose0, localPose1) 
    { 
        this.body0 = body0;
        this.body1 = body1;
        this.localPose0 = localPose0.clone();
        this.localPose1 = localPose1.clone();
        this.globalPose0 = localPose0.clone();
        this.globalPose1 = localPose1.clone();

        this.type = type;					
        this.compliance = 0.0;
        this.rotDamping = 0.0;
        this.posDamping = 0.0;
        this.hasSwingLimits = false;
        this.minSwingAngle = -2.0 * Math.PI;
        this.maxSwingAngle = 2.0 * Math.PI;
        this.swingLimitsCompliance = 0.0;
        this.hasTwistLimits = false;
        this.minTwistAngle = -2.0 * Math.PI;
        this.maxTwistAngle = 2.0 * Math.PI;
        this.twistLimitCompliance = 0.0;
    }
    solvePos(dt) {

        this.updateGlobalPoses();

        // orientation

        if (this.type == JointType.FIXED) {
            let q = this.globalPose0.q;
            q.conjugate();
            q.multiplyQuaternions(this.globalPose1.q, q);
            let omega = new THREE.Vector3();
            omega.set(2.0 * q.x, 2.0 * q.y, 2.0 * q.z);
            if (omega.w < 0.0)
                omega.multiplyScalar(-1.0);
            applyBodyPairCorrection(this.body0, this.body1, omega, this.compliance, dt);						
        }

        if (this.type == JointType.HINGE) {

            // align axes
            let a0 = getQuatAxis0(this.globalPose0.q);
            let b0 = getQuatAxis1(this.globalPose0.q);
            let c0 = getQuatAxis2(this.globalPose0.q);
            let a1 = getQuatAxis0(this.globalPose1.q);
            a0.cross(a1);
            applyBodyPairCorrection(this.body0, this.body1, a0, 0.0, dt);

            // limits
            if (this.hasSwingLimits) {
                this.updateGlobalPoses();
                let n = getQuatAxis0(this.globalPose0.q);
                let b0 = getQuatAxis1(this.globalPose0.q);
                let b1 = getQuatAxis1(this.globalPose1.q);
                limitAngle(this.body0, this.body1, n, b0, b1, 
                    this.minSwingAngle, this.maxSwingAngle, this.swingLimitsCompliance, dt);
            }
        }

        if (this.type == JointType.SPHERICAL) {

            // swing limits
            if (this.hasSwingLimits) {
                this.updateGlobalPoses();
                let a0 = getQuatAxis0(this.globalPose0.q);
                let a1 = getQuatAxis0(this.globalPose1.q);
                let n = new THREE.Vector3();
                n.crossVectors(a0, a1);
                n.normalize();
                limitAngle(this.body0, this.body1, n, a0, a1, 
                    this.minSwingAngle, this.maxSwingAngle, this.swingLimitsCompliance, dt);
            }
            // twist limits
            if (this.hasTwistLimits) {
                this.updateGlobalPoses();
                let n0 = getQuatAxis0(this.globalPose0.q);
                let n1 = getQuatAxis0(this.globalPose1.q);
                let n = new THREE.Vector3();
                n.addVectors(n0, n1)
                n.normalize();
                let a0 = getQuatAxis1(this.globalPose0.q);
                a0.addScaledVector(n, -n.dot(a0));
                a0.normalize();
                let a1 = getQuatAxis1(this.globalPose1.q);
                a1.addScaledVector(n, -n.dot(a1));
                a1.normalize();

                // handling gimbal lock problem
                let maxCorr = n0.dot(n1) > -0.5 ? 2.0 * Math.Pi : 1.0 * dt;		
               
                limitAngle(this.body0, this.body1, n, a0, a1, 
                    this.minTwistAngle, this.maxTwistAngle, this.twistLimitCompliance, dt, maxCorr);
            }
        }

        // position
        
        // simple attachment

        this.updateGlobalPoses();
        let corr = new THREE.Vector3();
        corr.subVectors(this.globalPose1.p, this.globalPose0.p);
        applyBodyPairCorrection(this.body0, this.body1, corr, this.compliance, dt,
            this.globalPose0.p, this.globalPose1.p);	
    }
